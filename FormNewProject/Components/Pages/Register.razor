@page "/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.RegularExpressions
@using FormNewProject.Components.Account
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using FormNewProject.Data
@using Microsoft.EntityFrameworkCore
@inject RoleManager<IdentityRole> RoleManager
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
<PageTitle>Register</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Register</MudText>

<MudGrid>
    <MudItem md="6">
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />

            <MudText Typo="Typo.body1" GutterBottom="true">Create a new account.</MudText>

            @if (identityErrors != null)
            {
            <MudAlert Severity="Severity.Error">
                @foreach (var error in identityErrors)
                {
                <MudText Typo="Typo.caption">@error.Description</MudText>
                }
            </MudAlert>
            }

            <MudGrid>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.UserName)" @bind-Value="Input.UserName"
                                        Label="Username" Placeholder="username"
                                        UserAttributes="@(new() { { "autocomplete", "username" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                        Label="Password" InputType="InputType.Password" Placeholder="password"
                                        UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.ConfirmPassword)" @bind-Value="Input.ConfirmPassword"
                                        Label="Confirm Password" InputType="InputType.Password" Placeholder="confirm password"
                                        UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem md="12">
                    <MudSelect T="IdentityRole" Label="Select Role" @bind-Value="Input.SelectedRole">
                        @foreach (var role in Roles.Where(x=>x.Name!="Admin" ).ToList()??new())
                        {
                            <MudSelectItem T="IdentityRole" Value="role">@role.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem md="12">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">Register</MudStaticButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudItem>
</MudGrid>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; } = "/";

    private string SelectedRole = "";
    private List<IdentityRole> Roles { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        Roles = await RoleManager.Roles.ToListAsync();
    }

    public async Task RegisterUser(EditContext editContext)
    {
        // Check if the username already exists
        var existingUser = await UserManager.FindByNameAsync(Input.UserName);
        if (existingUser != null)
        {
            identityErrors = new List<IdentityError>
            {
                new IdentityError
                {
                    Description = "Username is already taken. Please choose a different one."
                }
            };
            return;
        }

        // Create a new user instance
        var user = CreateUser();
        await UserStore.SetUserNameAsync(user, Input.UserName, CancellationToken.None);

        // Set the email based on the username
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, $"{Input.UserName}@simotex.com", CancellationToken.None);

        // Attempt to create the user with the specified password
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        // Assign the selected role to the user
        var selectedRole = Input.SelectedRole;
        if (!string.IsNullOrEmpty(selectedRole.Name))
        {
            var roleResult = await UserManager.AddToRoleAsync(user, selectedRole.Name);
            if (!roleResult.Succeeded)
            {
                identityErrors = roleResult.Errors;
                return;
            }
        }

        // Handle sign-in and navigation after successful registration
        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            NavigationManager.NavigateTo($"Account/RegisterConfirmation?email={user.Email}&returnUrl={ReturnUrl}", true);
            return;
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        NavigationManager.NavigateTo(ReturnUrl ?? "/", true);
    }
    
    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Username")]
        public string UserName { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [PasswordComplexity(ErrorMessage = "Password must contain at least one uppercase letter, one lowercase letter, one digit, and one special character.")]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public IdentityRole SelectedRole { get; set; } = new ();
    }

    public class PasswordComplexityAttribute : ValidationAttribute
    {
        protected override ValidationResult? IsValid(object? value, ValidationContext validationContext)
        {
            if (value is string password)
            {
                if (!Regex.IsMatch(password, @"[A-Z]"))
                    return new ValidationResult("Password must contain at least one uppercase letter.");

                if (!Regex.IsMatch(password, @"[a-z]"))
                    return new ValidationResult("Password must contain at least one lowercase letter.");

                if (!Regex.IsMatch(password, @"\d"))
                    return new ValidationResult("Password must contain at least one digit.");

                if (!Regex.IsMatch(password, @"[\W_]"))
                    return new ValidationResult("Password must contain at least one special character.");
            }

            return ValidationResult.Success;
        }
    }
}
